.TH PIQI 1 "January 14, 2015" "Piqi User Manual"
.SH NAME
.PP
piqi \- a collection of tools for working with structured data and Piqi
schemas
.SH SYNOPSIS
.PP
piqi [\f[I]command\f[]] [\f[I]options\f[]]
.SH DESCRIPTION
.PP
Piqi is a universal schema language and a collection of tools built
around it.
.PP
The Piqi language can be used to define schemas for JSON, XML, Google
Protocol Buffers and some other data formats.
.PP
\f[C]piqi\f[] is a command\-line program that implements a set of
sub\-commands:
.IP \[bu] 2
for validating, pretty\-printing and converting data between JSON, XML,
Protocol Buffers and Piq formats.
.IP \[bu] 2
for working with the schemas, such as converting definitions between
Piqi (\f[C]\&.piqi\f[]) and Protocol Buffes (\f[C]\&.proto\f[]), and
"compiling" Piqi definitions into one of the supported portable data
representation formats (JSON, XML, Protocol Buffers).
.SS Common options
.PP
This is the list of common options which is supported by most of
\f[C]piqi\f[] subcommands.
.TP
.B \f[C]\-I\ <dir>\f[]
Add directory to the list of Piqi search paths.
Search path specifies where to search for included or imported modules
defined in \f[C]\&.piqi\f[] or \f[C]\&.proto.piqi\f[] files.
.RS
.PP
This option can be specified several times.
.PP
The list of search paths can be also specified using the
\f[C]PIQI_PATH\f[] environment variable.
See the ENVIRONMENT section below.
.RE
.TP
.B \f[C]\-\-no\-warnings\f[]
Don\[aq]t print warnings.
.RS
.RE
.TP
.B \f[C]\-\-trace\f[]
Turn on tracing.
.RS
.RE
.TP
.B \f[C]\-\-debug\ <level>\f[]
Specify debug level; any number greater than 0 turns on debug messages.
.RS
.RE
.TP
.B \f[C]\-\-no\-builtin\-types\f[]
Don\[aq]t include built\-in types while processing loaded Piqi modules
.RS
.RE
.TP
.B \f[C]\-\-help\f[]
Display the list of options.
.RS
.RE
.TP
.B \f[C]\-\-version\f[]
Print Piqi version and exit.
.RS
.RE
.TP
.B \f[C]\-\-\f[]
This sequence delimits the list of options, the remaining arguments will
be treated as positional arguments.
.RS
.PP
For instance, if placed after \f[C]\-\-\f[] argument, \f[C]\-\f[] can be
used for specifying \f[C]stdin/stdout\f[] as input or output files.
.RE
.SS piqi convert
.PP
Usage: \f[C]piqi\ convert\ [options]\ [input\ file]\ [output\ file]\f[]
.PP
Converts structured data between \f[C]piq\f[], \f[C]json\f[],
\f[C]xml\f[], \f[C]pb\f[] (Protocol Buffers) formats.
.PP
It also can be used to convert \f[C]\&.piqi\f[] to \f[C]piq\f[],
\f[C]json\f[], or \f[C]pib\f[] formats by embedding Piqi specification
into the output data stream.
.PP
Piq encodings are described here (/doc/encodings/).
.PP
If both input and output files are not specified \f[C]stdin\f[] and
\f[C]stdout\f[] will be used respectively.
.PP
However, if an input file is specified without specifying the output
file, the output file name will be implicitly set to
\f[C]<input\ file\ name>.<encoding\ name>\f[].
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Alternative method for specifying output file; use \f[C]\-\f[] for
\f[C]stdout\f[].
.RS
.RE
.TP
.B \f[C]\-f\ pb|json|xml|piq|pib\f[]
Specify input encoding.
If not specified, input encoding will be chosen based on input
file\[aq]s extension.
.RS
.RE
.TP
.B \f[C]\-t\ pb|json|xml|piq|pib\f[]
Specify output encoding.
\f[C]piq\f[] encoding is used by default.
.RS
.RE
.TP
.B \f[C]\-\-type\ <typename>\f[]
Specify the type of converted object when converting from \f[C]pb\f[] or
\f[C]json\f[] encodings, as these formats do not contain information
about types.
For other input formats, this parameter defines the default object type.
.RS
.PP
\f[C]<typename>\f[] should be a fully qualified Piqi typename of the
form \f[C]<module\ name>/<type\ name>\f[].
.PP
If an input \f[C]pb\f[] or \f[C]json\f[] stream contains embedded Piqi
module(s), a special \f[C]\-\-type\ piqi\f[] value should be used.
.RE
.TP
.B \f[C]\-\-add\-defaults\f[]
Add field default values while converting records.
.RS
.PP
If an optional field specifies default value and the field value in the
input record is unspecified, the output field will be set to the default
value.
.RE
.TP
.B \f[C]\-\-embed\-piqi\f[]
Include data definitions in a form of embedded Piqi modules into the
data stream.
.RS
.PP
Piq data streams represented in \f[C]piq\f[], \f[C]json\f[] and
\f[C]pib\f[] formats can contain Piqi modules embedded in the data
stream.
.PP
\f[C]\-\-embed\-piqi\f[] flag tells \f[C]piqi\ convert\f[] to embed all
Piqi modules, which the input data depends on, into the output stream.
Such dependencies include all Piqi modules that define types for the
data contained in the stream and all the modules which the first\-level
dependencies include or import.
.PP
This way, using this flag, one can produce a self\-describing data bundle
that includes full description of the data contained in the stream.
.PP
If the flag is used when converting from \f[C]\&.piqi\f[], all
dependencies of the converted module will be included in the stream.
.RE
.TP
.B \f[C]\-\-json\-omit\-missing\-fields\ true|false\f[]
Whether to omit missing optional and empty repeated fields from JSON
output instead of representing them as {"field_name": null} and
{"field_name", []} JSON fields.
Default setting is \f[C]true\f[].
.RS
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate fields as errors when parsing JSON, XML and
Piq formats.
.RS
.RE
.TP
.B \f[C]\-e\ <extension\-name>\f[]
Automatically include extension modules (/doc/piqi#extensionmodules)
\f[C]<extension\-name>\f[] when loading .piqi files.
.RS
.RE
.TP
.B \f[C]\-\-gen\-extended\-piqi\-any\f[]
Use extended representation of \f[C]piqi\-any\f[] values in XML and JSON
output.
.RS
.PP
When specified, an extended version of \f[C]piqi\-any\f[] representation
is used in the conversion result.
In addition to the original JSON or XML value, it includes Piqi type
name (if known), Protobuf representation (if known or can be derived),
and a special marker indicating that this is an extended piqi\-any
representation.
.PP
For example, this flag changes relevant portion of "piqi convert \-t json
piqi.piqi" output from
.PP
"default": "required",
.PP
to
.PP
"default": { "piqi_type": "piqi\-any", "type": "piqi/field\-mode",
"protobuf": "CN+iipMB", "json": "required" },
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate options as errors
.RS
.RE
.TP
.B \f[C]\-\-piq\-frameless\-output\ true|false\f[]
Print a frame (i.e.
: []) around a single output Piq object (default=false)
.RS
.RE
.TP
.B \f[C]\-\-piq\-frameless\-input\ true|false\f[]
Expect a frame around a single input Piq object (default=false)
.RS
.RE
.TP
.B \f[C]\-\-piq\-relaxed\-parsing\ true|false\f[]
Parse Piq format using "relaxed" mode (default=false)
.RS
.PP
For instance, when set to \f[C]true\f[], single\-word string literals
don\[aq]t have to be quoted.
.RE
.SS piqi check
.PP
Usage: `piqi check [options] [input file]"
.PP
Returns 0 if the file is valid.
.TP
.B \f[C]\-f\ pb|json|xml|piq|pib\f[]
Specify input encoding.
If not specified, input encoding will be chosen based on input
file\[aq]s extension.
.RS
.RE
.TP
.B \f[C]\-\-type\ <typename>\f[]
Specify the type of converted object when converting from \f[C]pb\f[] or
\f[C]json\f[] encodings, as these formats do not contain information
about types.
For other input formats, this parameter defines the default object type.
.RS
.PP
\f[C]<typename>\f[] should be a fully qualified Piqi typename of the
form \f[C]<module\ name>/<type\ name>\f[].
.PP
If an input \f[C]pb\f[] or \f[C]json\f[] stream contains embedded Piqi
module(s), a special \f[C]\-\-type\ piqi\f[] value should be used.
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate fields as errors when parsing JSON, XML and
Piq formats.
.RS
.RE
.TP
.B \f[C]\-e\ <extension\-name>\f[]
Automatically include extension modules (/doc/piqi#extensionmodules)
\f[C]<extension\-name>\f[] when loading .piqi files.
.RS
.RE
.TP
.B \f[C]\-\-piq\-frameless\-input\ true|false\f[]
Expect a frame around a single input Piq object (default=false)
.RS
.PP
See \f[C]piqi\ convert\f[] for more details.
.RE
.TP
.B \f[C]\-\-piq\-relaxed\-parsing\ true|false\f[]
Parse Piq format using "relaxed" mode (default=false)
.RS
.PP
See \f[C]piqi\ convert\f[] for more details.
.RE
.SS piqi pp
.PP
Usage:
\f[C]piqi\ pp\ [options]\ [<.piqi|.piq\ file>]\ [output\ file]\f[]
.PP
Pretty\-prints .piq and .piqi files.
.PP
\f[B]NOTE:\f[] this command doesn\[aq]t check type validity.
.PP
If input or output file are not specified \f[C]stdin\f[] and
\f[C]stdout\f[] will be used respectively.
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Alternative method for specifying output file; use \f[C]\-\f[] for
\f[C]stdout\f[].
.RS
.RE
.TP
.B \f[C]\-\-normalize\-words\f[]
Normalize all words while pretty\-printing: convert all "CamelCase" Piq
words to "camel\-case" format.
.RS
.RE
.TP
.B \f[C]\-\-expand\-abbr\f[]
Expand built\-in syntax abbreviations.
See Piq documentation for details.
.RS
.RE
.TP
.B \f[C]\-\-piq\-relaxed\-parsing\ true|false\f[]
Parse Piq format using "relaxed" mode (default=false)
.RS
.PP
See \f[C]piqi\ convert\f[] for more details.
.RE
.SS piqi json\-pp
.PP
Usage:
\f[C]piqi\ json\-pp\ [options]\ [<.json\ file>]\ [output\ file]\f[]
.PP
Pretty\-prints JSON files.
Input file may contain several properly formatted JSON objects
represented as UTF\-8 text as defined by RFC
4627 (http://www.ietf.org/rfc/rfc4627.txt).
.PP
\f[B]NOTE:\f[] this command doesn\[aq]t check type validity.
.PP
If input or output file are not specified \f[C]stdin\f[] and
\f[C]stdout\f[] will be used respectively.
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Alternative method for specifying output file; use \f[C]\-\f[] for
\f[C]stdout\f[].
.RS
.RE
.TP
.B \f[C]\-\-indent\f[]
Use indentation instead of pretty\-printing
.RS
.RE
.SS piqi expand
.PP
Usage: \f[C]piqi\ expand\ [options]\ <.piqi\ file>\ [output\ file]\f[]
.PP
Include all included \f[C]\&.piqi\f[] and, by default, apply all
extensions in order to get a single \f[C]\&.piqi\f[] specifications from
several dependent \f[C]\&.piqi\f[] modules.
.TP
.B \f[C]\-o\ <output\ file>\f[]
Alternative method for specifying output file; use \f[C]\-\f[] for
\f[C]stdout\f[].
.RS
.RE
.TP
.B \f[C]\-\-includes\-only\f[]
Expand only includes (don\[aq]t expand extensions).
.RS
.RE
.TP
.B \f[C]\-\-functions\f[]
Removes embedded typedefs from function parameters and turns them into
correspondent top\-level definitions.
.RS
.RE
.TP
.B \f[C]\-\-extensions\f[]
Only expand extensions and includes (this is the default behavior).
.RS
.RE
.TP
.B \f[C]\-\-all\f[]
Equivalent to specifying both \f[C]\-\-extensions\f[] and
\f[C]\-\-functions\f[].
.RS
.RE
.TP
.B \f[C]\-\-add\-module\-name\f[]
Add module name if it wasn\[aq]t originally present
.RS
.RE
.TP
.B \f[C]\-e\ <extension\-name>\f[]
Automatically include extension modules (/doc/piqi#extensionmodules)
\f[C]<extension\-name>\f[] when loading .piqi files.
.RS
.RE
.SS piqi to\-proto
.PP
Usage: \f[C]piqi\ to\-proto\ [options]\ <.piqi\ file>\f[]
.PP
Converts \f[C]\&.piqi\f[] file to \f[C]\&.piqi.proto\f[]
.PP
The conversion rules are specified
here (/doc/protobuf/#piqitoprotomapping).
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Specify an alternative output file name instead of
\f[C]%.piqi.proto\f[].
.RS
.RE
.SS piqi of\-proto
.PP
Usage: \f[C]piqi\ of\-proto\ [options]\ <.proto\ file>\f[]
.PP
Converts \f[C]\&.proto\f[] file to \f[C]\&.proto.piqi\f[]
.PP
The conversion rules are specified
here (/doc/protobuf/#prototopiqimapping).
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Specify an alternative output file name instead of
\f[C]%.proto.piqi\f[].
.RS
.RE
.TP
.B \f[C]\-\-normalize\f[]
Convert "CamelCase" identifiers in Proto specification into "camel\-case"
format.
.RS
.RE
.TP
.B \f[C]\-\-convert\-groups\f[]
Convert Protocol Buffers Group definitions to Piqi records definitions.
.RS
.PP
The resulting Piqi specification will be valid, but not compatible with
the initial Proto specification.
.PP
Groups are deprecated in Protocol Buffers and not supported by Piqi.
.RE
.TP
.B \f[C]\-\-leave\-tmp\-files\f[]
Don\[aq]t delete temporary files created during command execution.
This option is useful for debugging.
.RS
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate fields as errors when parsing the Piqi spec
.RS
.RE
.SS piqi light
.PP
Usage: \f[C]piqi\ light\ [options]\ [<.piqi\ file>]\ [output\-file]\f[]
.PP
Prints \f[C]\&.piqi\f[] file using Piqi\-light
syntax (/doc/piqi/#piqilightsyntax).
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Alternative method for specifying output file; use \f[C]\-\f[] for
\f[C]stdout\f[].
.RS
.RE
.SS piqi getopt
.PP
Usage: \f[C]piqi\ getopt\ [options]\ \-\-\ [<data\ arguments>]\f[]
.PP
Interprets command\-line arguments as typed data, and outputs it in
various formats.
.PP
For description of command\-line argument syntax and the way how
arguments are parsed see correspondent section (/doc/getopt/) of the
current documentation.
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Specify output file; use \f[C]\-\f[] for \f[C]stdout\f[].
If no \f[C]\-o\f[] option is given, \f[C]stdout\f[] is used by default.
.RS
.RE
.TP
.B \f[C]\-t\ pb|json|xml|piq|pib\f[]
Specify output encoding.
\f[C]piq\f[] encoding is used by default.
.RS
.PP
Requires \f[C]\-\-type\f[] option.
.PP
If \f[C]\-t\f[] option is not used, Piq AST will be produced instead of
the converted data object.
This mode is useful for debugging and understanding how Piqi parses
command\-line arguments.
.RE
.TP
.B \f[C]\-\-type\ <typename>\f[]
Specify the name of the expected data type.
.RS
.PP
\f[C]<typename>\f[] should be a fully qualified Piqi typename of the
form \f[C]<module\ name>/<type\ name>\f[].
.PP
(This option is applied only when \f[C]\-t\f[] option is used.)
.RE
.TP
.B \f[C]\-\-add\-defaults\f[]
Add field default values while converting records.
.RS
.PP
If an optional field specifies default value and the field value in the
input record is unspecified, the output field will be set to the default
value.
.PP
(This option is applied only when \f[C]\-t\f[] option is used.)
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate options as errors
.RS
.RE
.SS piqi call
.PP
Usage: piqi call [options] <URL> \-\- [call arguments]
.PP
Piqi\-RPC native client.
.PP
It interprets command\-line arguments as input parameters for a remote
function, converts them into a Protobuf\-encoded data object and executes
a Piqi\-RPC remote function call.
.PP
In addition to calling a remote function, it can fetch Piqi
specifications of the remote service and print them in several formats:
Piqi (\f[C]\-\-piqi\f[] flag), Piqi\-light (\f[C]\-p\f[] flag) and
getopt\-style help for remote functions (\f[C]\-h\f[] flag).
.PP
\f[C]<URL>\f[] is either an HTTP URL or a path to a local executable.
HTTP URL must start with \f[C]http://\f[] or \f[C]https://\f[].
Everything else will be considered as a path to a local command, i.e.
\f[I]local URL\f[].
.PP
In case of HTTP URL, a remote call will be performed by sending an HTTP
\f[C]POST\f[] request that contains input arguments in the request\[aq]s
body.
.PP
In case of a \f[I]local <URL>\f[], the correspondent program will be
started, the function will be called using Piqi\-RPC\-over\-pipe protocol,
and the program will be shut down.
This mode is intended mainly for debugging low\-level Piqi\-RPC services
that run locally.
.PP
Remote function\[aq]s output can be printed in a variety of different
formats: JSON, XML, Protobuf, Piq (see \f[C]\-t\f[] option).
Returned application errors (i.e.
\f[I]error\f[] function parameter) will be printed to \f[C]stderr\f[] in
the requested format.
.PP
More details can be found in Piqi\-RPC documentation (/doc/piqi\-rpc/).
.PP
Options:
.TP
.B \f[C]\-o\ <output\ file>\f[]
Specify output file; use \f[C]\-\f[] for \f[C]stdout\f[].
If no \f[C]\-o\f[] option is given, \f[C]stdout\f[] is used by default.
.RS
.PP
However, \f[C]stderr\f[] is always used for printing all kinds of
errors.
.RE
.TP
.B \f[C]\-t\ pb|json|xml|piq|pib\f[]
Specify encoding for the function\[aq]s output parameters.
\f[C]piq\f[] encoding is used by default.
.RS
.RE
.TP
.B \f[C]\-\-piqi\f[]
Instead of calling a function, only print the Piqi module that defines
the service.
.RS
.RE
.TP
.B \f[C]\-\-piqi\-all\f[]
Similar to \f[C]\-\-piqi\f[], but print the Piqi module that defines the
service and all its dependencies.
.RS
.RE
.TP
.B \f[C]p\f[] | \f[C]\-\-piqi\-light\f[]
Similar to \f[C]\-\-piqi\f[], but print the Piqi module using Piqi\-light
syntax.
.RS
.RE
.TP
.B \f[C]\-h\f[]
Similar to \f[C]\-\-piqi\f[], but print command\-line usage help for remote
Piqi\-RPC functions.
Printed help is automatically generated from the Piqi specification.
.RS
.RE
.TP
.B \f[C]\-\-strict\f[]
Treat unknown and duplicate options as errors
.RS
.RE
.SH ENVIRONMENT
.TP
.B \f[C]PIQI_TRACE\f[]
Definition of this environment variable has the same effect as
specifying \f[C]\-\-trace\f[] command\-line option.
.RS
.RE
.TP
.B \f[C]PIQI_PATH\f[]
Specifies directory paths where to search for \f[C]\&.piqi\f[] or
\f[C]\&.proto.piqi\f[] specifications.
Several paths can be specified separated by \f[C]:\f[].
.RS
.PP
You can also specify search paths using the \f[C]\-I\f[] command\-line
option.
.RE
.SH KNOWN PROBLEMS
.IP \[bu] 2
Currently there are no checks for integer overflows while reading and
writing Piq data in various formats.
If an integer value doesn\[aq]t fit into the range of the specified
integer type, it will be silently stripped down.
.IP \[bu] 2
\f[C]piqi\ of\-proto\f[] doesn\[aq]t work correctly on Google Protobuf
specifications which rely on groups (groups are deprecated in Protocol
Buffers and not supported by Piqi).
.RS 2
.PP
For example, Piqi fails to convert the following \f[C]\&.proto\f[] file
from Google Protocol Buffers source distribution:
.IP
.nf
\f[C]
piqi\ of\-proto\ google/protobuf/unittest_custom_options.proto
\f[]
.fi
.RE
.SH EXAMPLES
.PP
For examples of Piqi tools usage, visit Examples (/examples/) page or
take a look at \f[C]test_piq\f[], \f[C]test_piqi\f[] and
\f[C]test_piqi_proto\f[] shell scripts from examples
directory (http://github.com/alavrik/piqi/tree/master/examples/) in Piqi
source distribution.
.SH AUTHORS
Anton Lavrik <alavrik@piqi.org>.
